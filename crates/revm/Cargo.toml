[package]
authors = ["Dragan Rakita <dragan0rakita@gmail.com>"]
description = "revm - Rust Ethereum Virtual Machine"
edition = "2021"
keywords = ["no_std", "ethereum", "evm", "revm"]
license = "MIT"
name = "revm"
repository = "https://github.com/bluealloy/revm"
version = "14.0.1"
readme = "../../README.md"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lints.rust]
unreachable_pub = "warn"
unused_must_use = "deny"
rust_2018_idioms = "deny"

[lints.rustdoc]
all = "warn"

[dependencies]
# revm
interpreter.workspace = true
precompile.workspace = true
wiring.workspace = true
primitives.workspace = true
database-interface.workspace = true
state.workspace = true
specification.workspace = true
bytecode.workspace = true

# misc
auto_impl = { version = "1.2", default-features = false }
derive-where = { version = "1.2.7", default-features = false }
dyn-clone = "1.0"

# Optional
serde = { version = "1.0", default-features = false, features = [
    "derive",
    "rc",
], optional = true }
serde_json = { version = "1.0", default-features = false, features = [
    "alloc",
], optional = true }

# alloydb
tokio = { version = "1.40", features = [
    "rt-multi-thread",
    "macros",
], optional = true }
alloy-provider = { version = "0.3", optional = true, default-features = false }
alloy-eips = { version = "0.3", optional = true, default-features = false }
alloy-transport = { version = "0.3", optional = true, default-features = false }

[dev-dependencies]
alloy-sol-types = { version = "0.8.2", default-features = false, features = [
    "std",
] }
ethers-contract = { version = "2.0.14", default-features = false }
anyhow = "1.0.89"
criterion = "0.5"
indicatif = "0.17"
reqwest = { version = "0.12" }
rstest = "0.22.0"

alloy-provider = "0.3"

[features]
default = ["std", "c-kzg", "secp256k1", "portable", "blst"]
std = [
    "serde?/std",
    "serde_json?/std",
    "serde_json?/preserve_order",
    "interpreter/std",
    "precompile/std",
]
hashbrown = ["interpreter/hashbrown", "precompile/hashbrown"]
serde = ["dep:serde", "interpreter/serde", "database-interface/serde"]
serde-json = ["serde", "dep:serde_json"]
arbitrary = ["primitives/arbitrary"]
asm-keccak = ["primitives/asm-keccak"]
portable = ["wiring/portable"]

test-utils = []

alloydb = [
    "std",
    "dep:tokio",
    "dep:alloy-provider",
    "dep:alloy-eips",
    "dep:alloy-transport",
]

dev = [
    "memory_limit",
    "optional_balance_check",
    "optional_block_gas_limit",
    "optional_eip3607",
    "optional_gas_refund",
    "optional_no_base_fee",
]
memory_limit = ["wiring/memory_limit", "interpreter/memory_limit"]
optional_balance_check = ["wiring/optional_balance_check"]
optional_block_gas_limit = ["wiring/optional_block_gas_limit"]
optional_eip3607 = ["wiring/optional_eip3607"]
optional_gas_refund = ["wiring/optional_gas_refund"]
optional_no_base_fee = ["wiring/optional_no_base_fee"]

# See comments in `precompile`
secp256k1 = ["precompile/secp256k1"]
c-kzg = ["precompile/c-kzg"]
# `kzg-rs` is not audited but useful for `no_std` environment, use it with causing and default to `c-kzg` if possible.
kzg-rs = ["precompile/kzg-rs"]
blst = ["precompile/blst"]

[[example]]
name = "fork_ref_transact"
path = "../../examples/fork_ref_transact.rs"
required-features = ["alloydb"]

[[example]]
name = "generate_block_traces"
path = "../../examples/generate_block_traces.rs"
required-features = ["std", "serde-json", "alloydb"]

[[example]]
name = "db_by_ref"
path = "../../examples/db_by_ref.rs"
required-features = ["std", "serde-json"]

[[example]]
name = "deploy"
path = "../../examples/deploy.rs"
required-features = []

#[[example]]
#name = "uniswap_v2_usdc_swap"
#path = "../../examples/uniswap_v2_usdc_swap.rs"
#required-features = ["alloydb"]

[[bench]]
name = "bench"
path = "benches/bench.rs"
harness = false
